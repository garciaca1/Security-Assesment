# OpenVAS Deployment Guide

This guide explains how to deploy OpenVAS (Greenbone Vulnerability Manager) using Docker for integration with Wazuh SIEM.

## Prerequisites

- Docker and Docker Compose installed
- Sufficient system resources (at least 4GB RAM dedicated to Docker)
- Network connectivity between the OpenVAS container and Wazuh server

## Installing Docker (if not already installed)

1. Update your package lists:
```bash
sudo apt update
```

2. Install prerequisites:
```bash
sudo apt install apt-transport-https ca-certificates curl software-properties-common
```

3. Add Docker's official GPG key:
```bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
```

4. Add the Docker repository (using compatible Ubuntu repository):
```bash
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
```

5. Update apt with the new repository:
```bash
sudo apt update
```

6. Install Docker:
```bash
sudo apt install docker-ce docker-ce-cli containerd.io
```

7. Add your user to the docker group to run docker without sudo:
```bash
sudo usermod -aG docker $USER
```

8. Apply group changes:
```bash
newgrp docker
```

9. Install Docker Compose:
```bash
sudo apt install docker-compose
```

## Deploying OpenVAS Container

1. Create a directory for the OpenVAS container configuration:
```bash
mkdir ~/openvas-docker
cd ~/openvas-docker
```

2. Create docker-compose.yml file:
```bash
nano docker-compose.yml
```

3. Add the following content to the file:
```yaml
version: '3'

services:
  openvas:
    image: securecompliance/gvm:latest
    container_name: openvas
    restart: unless-stopped
    ports:
      - "8080:9392"
      - "5432:5432"
      - "2222:22"
    environment:
      - USERNAME=admin
      - PASSWORD=admin
      - ALLOW_PLAIN_PASSWORDS=true
      - SCANNER_TLS=false
      - RELAYHOST=smtp.example.com
      - SMTPPORT=25
      - AUTO_UPDATE=true
    volumes:
      - openvas-data:/data
      - openvas-ssh:/etc/ssh

volumes:
  openvas-data:
  openvas-ssh:
```

4. Start the OpenVAS container:
```bash
docker-compose up -d
```

This will pull the OpenVAS image and start the container. The initial setup process takes approximately 15-30 minutes as it downloads vulnerability databases and performs initial configuration.

## Configuration and Access

1. Get the container's IP address:
```bash
docker inspect openvas | grep IPAddress
```

2. Access the OpenVAS web interface by navigating to:
```
https://YOUR_SERVER_IP:8080
```

3. Log in with the credentials:
   - Username: admin
   - Password: admin

## Integrating with Wazuh

1. Edit the OpenVAS integration script in Wazuh:
```bash
sudo nano /var/ossec/integrations/custom-openvas.py
```

2. Update the connection details with your OpenVAS container's IP address:
```python
OPENVAS_HOST = "YOUR_OPENVAS_CONTAINER_IP"
OPENVAS_PORT = 9392
```

3. Configure Wazuh to use the OpenVAS integration by editing ossec.conf:
```bash
sudo nano /var/ossec/etc/ossec.conf
```

4. Add the following section within the `<ossec_config>` tags:
```xml
<integration>
  <name>custom-openvas</name>
  <hook_url>YOUR_OPENVAS_CONTAINER_IP</hook_url>
  <level>3</level>
  <group>vulnerability-detector</group>
  <api_key>admin:admin</api_key>
</integration>
```

5. Restart Wazuh:
```bash
sudo systemctl restart wazuh-manager
```

## Creating Scan Configurations

For game server environments, we recommend creating custom scan profiles to minimize resource usage:

1. Log in to the OpenVAS web interface
2. Go to Configuration > Scan Configs
3. Create a "Game Server" profile with the following settings:
   - Disable port scanning on game-critical ports
   - Set a low concurrency value (1-3)
   - Schedule scans during low-traffic periods
   - Focus on critical and high vulnerabilities only

## Managing the OpenVAS Container

Basic commands for managing your OpenVAS container:

```bash
# Stop OpenVAS
docker-compose stop

# Start OpenVAS
docker-compose start

# Restart OpenVAS
docker-compose restart

# View logs
docker-compose logs -f

# Update OpenVAS (pull latest image and restart)
docker-compose pull
docker-compose up -d
```

## Troubleshooting

### Container Not Starting

Check the container logs:
```bash
docker logs openvas
```

### Database Initialization Issues

If the database fails to initialize, try removing the volumes and recreating the container:
```bash
docker-compose down -v
docker-compose up -d
```

### Connection Issues from Wazuh

1. Verify the container is running:
```bash
docker ps | grep openvas
```

2. Check network connectivity:
```bash
ping YOUR_OPENVAS_CONTAINER_IP
```

3. Verify port access:
```bash
telnet YOUR_OPENVAS_CONTAINER_IP 9392
```

### Scan Performance Issues

If scans are consuming too many resources:

1. Edit the openvas scanner preferences:
   - Reduce max_hosts and max_checks
   - Increase timeout values

2. Consider running scans during off-peak hours:
```bash
docker exec -it openvas bash -c "gvmd --schedule-task TASK_UUID"
```

## Additional Resources

- [Greenbone Community Documentation](https://greenbone.github.io/docs/)
- [OpenVAS Docker Repository](https://github.com/Secure-Compliance-Solutions-LLC/GVM-Docker)
- [Wazuh Integration Guide](https://documentation.wazuh.com/current/user-manual/capabilities/virustotal-scan/integration.html)
